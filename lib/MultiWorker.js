"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiWorker = void 0;
const isBrowser = new Function("try {return this===window;}catch(e){ return false;}");
const BROWSER_INJECTION = _browserInjection.toString().substring(_browserInjection.toString().indexOf("{") + 1, _browserInjection.toString().lastIndexOf("}"));
const NODE_INJECTION = _nodeInjection.toString().substring(_nodeInjection.toString().indexOf("{") + 1, _nodeInjection.toString().lastIndexOf("}"));
class MultiWorker {
    _browserWorker = null;
    _nodeWorker = null;
    constructor(script) {
        if (isBrowser()) {
            script = `${BROWSER_INJECTION}\r\n${script}`;
            this._browserWorker = new Worker(`data:text/javascript;charset=UTF-8,${encodeURIComponent(script)}`);
        }
        else {
            script = `${NODE_INJECTION}\r\n${script}`;
            this._nodeWorker = new (require("worker_threads").Worker)(script, {
                eval: true
            });
        }
    }
    addEventListener(type, listener) {
        if (this._browserWorker) {
            this._browserWorker.addEventListener(type, listener);
        }
        else {
            this._nodeWorker.on(type, listener);
        }
    }
    postMessage(msg) {
        if (this._browserWorker) {
            this._browserWorker.postMessage(msg);
        }
        else {
            this._nodeWorker.postMessage(require("v8").serialize(msg));
        }
    }
}
exports.MultiWorker = MultiWorker;
function _browserInjection() {
    const _d_ñ = (v) => v;
    const _now_ñ = performance.now;
    const _dif_ñ = (d) => _now_ñ() - d;
    console.log = (...args) => {
        parent.postMessage({ log: args });
    };
}
function _nodeInjection() {
    const parent = require("worker_threads").parentPort;
    const performance = require("perf_hooks").performance;
    const _d_ñ = (v) => require("v8").deserialize(v);
    const _now_ñ = process.hrtime.bigint;
    const _dif_ñ = (d) => Number(_now_ñ() - d) / 1000000;
    console.log = (...args) => {
        parent.postMessage({ log: args });
    };
    const close = process.exit;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXVsdGlXb3JrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvTXVsdGlXb3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTSxTQUFTLEdBQUcsSUFBSSxRQUFRLENBQUMscURBQXFELENBQUMsQ0FBQztBQUl0RixNQUFNLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQy9KLE1BQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBRW5KLE1BQWEsV0FBVztJQUNaLGNBQWMsR0FBVSxJQUF5QixDQUFDO0lBQ2xELFdBQVcsR0FBYyxJQUE2QixDQUFDO0lBQy9ELFlBQVksTUFBYTtRQUNyQixJQUFJLFNBQVMsRUFBRSxFQUFFO1lBQ2IsTUFBTSxHQUFHLEdBQUcsaUJBQWlCLE9BQU8sTUFBTSxFQUFFLENBQUM7WUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxzQ0FBc0Msa0JBQWtCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3hHO2FBQU07WUFDSCxNQUFNLEdBQUcsR0FBRyxjQUFjLE9BQU8sTUFBTSxFQUFFLENBQUM7WUFDMUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQTRCLEVBQUMsTUFBTSxFQUFFO2dCQUNuRixJQUFJLEVBQUUsSUFBSTthQUNiLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQUVELGdCQUFnQixDQUFDLElBQVksRUFBRSxRQUEyQjtRQUN0RCxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDckIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDeEQ7YUFBTTtZQUNILElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztTQUN2QztJQUNMLENBQUM7SUFDRCxXQUFXLENBQUMsR0FBTztRQUNmLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNyQixJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4QzthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzlEO0lBQ0wsQ0FBQztDQUNKO0FBN0JELGtDQTZCQztBQUNELFNBQVMsaUJBQWlCO0lBQ3RCLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQztJQUMvQixNQUFNLE1BQU0sR0FBRyxDQUFDLENBQVEsRUFBRSxFQUFFLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQVUsRUFBRSxFQUFFO1FBQzVCLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUM7QUFDTixDQUFDO0FBQ0QsU0FBUyxjQUFjO0lBQ25CLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUNwRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ3RELE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBWSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO0lBQzVELE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQVUsRUFBRSxFQUFFO1FBQzVCLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUM7SUFDRixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQy9CLENBQUMifQ==