"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../");
const _consoleLog = console.log;
function testLog(log, ...logs) {
    logs.unshift(log);
    console.log = (...args) => {
        let str = args.join(" ");
        let log = logs.shift();
        if (!log.test(str)) {
            throw new Error("Invalid log test: " + log + ". Received: " + str);
        }
        else if (logs.length === 0) {
            console.log = () => { };
        }
    };
}
const SLOW_REGEXP = new RegExp(`^slow.*1\.000x ${__1.IsoBench.STRINGS.WORSE.replaceAll("(", "\\(").replaceAll(")", "\\(")}$`);
const FAST_REGEXP = new RegExp(`^fast.*x ${__1.IsoBench.STRINGS.BEST.replaceAll("(", "\\(").replaceAll(")", "\\(")}$`);
function testArguments() {
    _consoleLog("Testing arguments");
    let buffer = Buffer.allocUnsafe(10);
    buffer.fill(10);
    let scope = new __1.IsoBench.Scope({
        ms: 10
    }, (buffer) => {
        return ["test", 123, function () { }, buffer];
    }, buffer);
    scope.add("args", (arg1, arg2, fn, buffer) => {
        console.log(arg1, arg2, fn.toString(), buffer, buffer.constructor.name);
    });
    testLog(/^test 123 function \(\) { } 10,10,10,10,10,10,10,10,10,10 Buffer$/);
    return scope.run();
}
function testAsyncArguments() {
    _consoleLog("Testing async arguments");
    let buffer = Buffer.allocUnsafe(10);
    buffer.fill(10);
    let scope = new __1.IsoBench.Scope({
        ms: 10
    }, async (buffer) => {
        return ["test", 123, function () { }, buffer];
    }, buffer);
    scope.add("args", (arg1, arg2, fn, buffer) => {
        console.log(arg1, arg2, fn.toString(), buffer, buffer.constructor.name);
    });
    testLog(/^test 123 function \(\) { } 10,10,10,10,10,10,10,10,10,10 Buffer$/);
    return scope.run();
}
function slowfast() {
    _consoleLog("Testing slow-fast result comparison");
    let scope = new __1.IsoBench.Scope({
        ms: 100,
        parallel: 2
    });
    scope.add("slow", () => {
        /s/.test("test this");
    }).add("fast", () => {
        "test this".indexOf("s");
    }).result();
    testLog(SLOW_REGEXP, FAST_REGEXP);
    return scope.run();
}
function fastslow() {
    _consoleLog("Testing fast-slow result comparison");
    let scope = new __1.IsoBench.Scope({
        ms: 100,
        parallel: 2
    });
    scope.add("fast", () => {
        "test this".indexOf("s");
    }).add("slow", () => {
        /s/.test("test this");
    }).result();
    testLog(FAST_REGEXP, SLOW_REGEXP);
    return scope.run();
}
function singleOutputs() {
    _consoleLog("Testing single outputs and result");
    let scope = new __1.IsoBench.Scope({
        ms: 100
    });
    scope.add("slow", () => {
        /s/.test("test this");
    }).output().add("fast", () => {
        "test this".indexOf("s");
    }).output().result();
    testLog(/^slow.*ms\.$/, /^fast.*ms\.$/, SLOW_REGEXP, FAST_REGEXP);
    return scope.run();
}
function doubleoutput() {
    _consoleLog("Testing 2x output and result");
    let scope = new __1.IsoBench.Scope({
        ms: 100
    });
    scope.add("slow", () => {
        /s/.test("test this");
    }).add("fast", () => {
        "test this".indexOf("s");
    }).output().result();
    testLog(/^slow.*ms\.$/, /^fast.*ms\.$/, SLOW_REGEXP, FAST_REGEXP);
    return scope.run();
}
function librarytest() {
    _consoleLog("Testing require test");
    let scope = new __1.IsoBench.Scope({
        ms: 100
    }, () => {
        const CRYPTO = require("crypto");
        return [CRYPTO];
    });
    scope.add("md5", (CRYPTO) => {
        CRYPTO.createHash("md5").update("test").digest("hex");
    }).output().result();
    testLog(/^md5.*ms\.$/);
    return scope.run();
}
(async function () {
    await testArguments();
    await testAsyncArguments();
    await slowfast();
    await fastslow();
    await singleOutputs();
    await doubleoutput();
    await librarytest();
    _consoleLog("Tests completed");
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGVzdHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSwyQkFBK0I7QUFFL0IsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUNoQyxTQUFTLE9BQU8sQ0FBQyxHQUFVLEVBQUUsR0FBRyxJQUFhO0lBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEIsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBVSxFQUFFLEVBQUU7UUFDNUIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFHLENBQUM7UUFDeEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsR0FBRyxHQUFHLEdBQUcsY0FBYyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1NBQ3RFO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUMxQixPQUFPLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztTQUMxQjtJQUNMLENBQUMsQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsWUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxSCxNQUFNLFdBQVcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxZQUFZLFlBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxD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