{"version":3,"file":"iso-bench.mjs","sources":["../src/MultiWorker.ts","../src/index.ts"],"sourcesContent":["const isBrowser = new Function(\"try {return this===window;}catch(e){ return false;}\");\r\n\r\nimport type { Worker as NodeWorker } from \"worker_threads\";\r\n\r\nconst BROWSER_INJECTION = _browserInjection.toString().substring(_browserInjection.toString().indexOf(\"{\") + 1, _browserInjection.toString().lastIndexOf(\"}\"));\r\nconst NODE_INJECTION = _nodeInjection.toString().substring(_nodeInjection.toString().indexOf(\"{\") + 1, _nodeInjection.toString().lastIndexOf(\"}\"));\r\n\r\nexport class MultiWorker {\r\n    private _browserWorker:Worker = null as unknown as Worker;\r\n    private _nodeWorker:NodeWorker = null as unknown as NodeWorker;\r\n    constructor(script:string) {\r\n        if (isBrowser()) {\r\n            script = `${BROWSER_INJECTION}\\r\\n${script}`;\r\n            this._browserWorker = new Worker(`data:text/javascript;charset=UTF-8,${encodeURIComponent(script)}`);\r\n        } else {\r\n            script = `${NODE_INJECTION}\\r\\n${script}`;\r\n            this._nodeWorker = new (require(\"worker_threads\").Worker as typeof NodeWorker)(script, {\r\n                eval: true\r\n            });\r\n        }\r\n    }\r\n    addEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any): void;\r\n    addEventListener(type: string, listener:(...args:any)=>any) {\r\n        if (this._browserWorker) {\r\n            this._browserWorker.addEventListener(type, listener);\r\n        } else {\r\n            this._nodeWorker.on(type, listener);\r\n        }\r\n    }\r\n    postMessage(msg:any) {\r\n        if (this._browserWorker) {\r\n            this._browserWorker.postMessage(msg);\r\n        } else {\r\n            this._nodeWorker.postMessage(require(\"v8\").serialize(msg));\r\n        }\r\n    }\r\n}\r\nfunction _browserInjection() {\r\n    const _d_ñ = (v:any) => v;\r\n    const _now_ñ = performance.now;\r\n    const _dif_ñ = (d:number) => _now_ñ() - d;\r\n    console.log = (...args:any[]) => {\r\n        parent.postMessage({ log: args });\r\n    };\r\n}\r\nfunction _nodeInjection() {\r\n    const parent = require(\"worker_threads\").parentPort;\r\n    const performance = require(\"perf_hooks\").performance;\r\n    const _d_ñ = (v:Uint8Array) => require(\"v8\").deserialize(v);\r\n    const _now_ñ = process.hrtime.bigint;\r\n    const _dif_ñ = (d:bigint) => Number(_now_ñ() - d) / 1000000;\r\n    console.log = (...args:any[]) => {\r\n        parent.postMessage({ log: args });\r\n    };\r\n    const close = process.exit;\r\n}","import { MultiWorker } from \"./MultiWorker\";\r\n\r\ntype Copy<T> = T extends Array<T> ? T : T; // Workaround to avoid empty scope arguments failing types\r\n\r\ntype ScriptData = {\r\n    name:string;\r\n    samples:number;\r\n    opMs:number;\r\n    totalTime:number;\r\n    cycles:number;\r\n    script:{\r\n        body:string;\r\n        args:string[];\r\n        evalArgs:string;\r\n    },\r\n    log?:any[];\r\n};\r\ntype LogData = {\r\n    log:any[];\r\n};\r\ntype OutputData = {\r\n    log:any[];\r\n    clear:boolean;\r\n};\r\nfunction isScriptData(res:ScriptData|LogData|OutputData):res is ScriptData {\r\n    return \"script\" in res;\r\n}\r\nfunction isOutputData(res:ScriptData|LogData|OutputData):res is OutputData {\r\n    return \"clear\" in res;\r\n}\r\n\r\nfunction processFunction(fn:(...args:any[])=>any) {\r\n    let body = fn.toString();\r\n    let args = body.substring(body.indexOf(\"(\") + 1, body.indexOf(\")\")).split(\",\").map(el => el.trim()).filter(el => !!el);\r\n    if (body.startsWith(\"function\")) {\r\n        body = body.substring(body.indexOf(\"{\") + 1, body.lastIndexOf(\"}\")).trim();\r\n    } else {\r\n        body = body.substring(body.indexOf(\"=>\") + 2).trim();\r\n        if (body.startsWith(\"{\") && body.endsWith(\"}\")) {\r\n            body = body.substring(1, body.length-1).trim();\r\n        }\r\n    }\r\n    let evalArgs:string[] = [];\r\n    for (let i = 0; i < args.length; i++) {\r\n        evalArgs.push(`let ${args[i]} = _args_ñ[${i}];`);\r\n    }\r\n    return { args, body, evalArgs: evalArgs.join(\"\\r\\n\") };\r\n}\r\n\r\nexport namespace IsoBench {\r\n    export enum STRINGS {\r\n        WORSE = \"WORSE\",\r\n        BEST = \"BEST\",\r\n        COMPLETED = \"[TESTS COMPLETED]\"\r\n    };\r\n    export type ScopeOptions = {\r\n        parallel?:number;\r\n        ms?:number;\r\n    };\r\n    export class Scope<T_ARGS extends any[], T_SCOPE extends readonly any[]> {\r\n        private _args;\r\n        private _setup\r\n        private _scripts:(ScriptData)[] = [];\r\n        private _doneScripts:ScriptData[] = [];\r\n        private _loggedScripts = new Set<ScriptData>()\r\n        private _logData:(ScriptData|LogData|OutputData)[] = [];\r\n        private _running = 0;\r\n        private _endCb:(() => void) | null = null;;\r\n        readonly options:Required<ScopeOptions>;\r\n        started = false;\r\n        constructor(options:ScopeOptions = {}, _setup?:(...args:Copy<T_ARGS>) => Promise<T_SCOPE>|T_SCOPE, ...args:T_ARGS) {\r\n            this.options = {\r\n                parallel: 1,\r\n                ms: 1000,\r\n                ...options\r\n            };\r\n            this._setup = _setup ? `let _args_ñ = await eval(${String(_setup)})(..._data_ñ.args);` : \"\";\r\n            this._args = args;\r\n        }\r\n        add(name:string, cb:(...args:T_SCOPE)=>any) {\r\n            let data:ScriptData = {\r\n                name: name,\r\n                samples: 0,\r\n                opMs: -1,\r\n                totalTime: 0,\r\n                cycles: 100,\r\n                script: processFunction(cb)\r\n            };\r\n            this._scripts.push(data);\r\n            this._logData.push(data);\r\n            return this;\r\n        }\r\n        log(...log:any[]) {\r\n            this._logData.push({\r\n                log: log\r\n            });\r\n            return this;\r\n        }\r\n        output(...log:any[]) {\r\n            this._logData.push({\r\n                log: log,\r\n                clear: false\r\n            });\r\n            return this;\r\n        }\r\n        result(...log:any[]) {\r\n            this._logData.push({\r\n                log: log,\r\n                clear: true\r\n            });\r\n            return this;\r\n        }\r\n        run() {\r\n            return new Promise<void>((resolve, reject) => {\r\n                if (!this.started) {\r\n                    this.started = true;\r\n                    this._endCb = resolve;\r\n                    this._checkOutput();\r\n                    this._next();\r\n                } else {\r\n                    reject(new Error(\"Already running\"));\r\n                }\r\n            });\r\n        }\r\n        private _logPack(clear:boolean) {\r\n            let toLog = this._doneScripts.slice();\r\n            if (!clear) {\r\n                for (let script of this._loggedScripts) {\r\n                    toLog.splice(toLog.indexOf(script), 1);\r\n                }\r\n            }\r\n            let ops = toLog.map(el => el.opMs);\r\n            let min = Math.min(...ops.filter(n => !!n));\r\n            let max = Math.max(...ops.filter(n => !!n));\r\n            for (let data of toLog) {\r\n                this._loggedScripts.add(data);\r\n                if (clear && data.opMs > 0) {\r\n                    data.log!.push(`${(data.opMs / min).toFixed(3)}x`);\r\n                    data.log!.push(`${data.opMs === min ? STRINGS.WORSE : \"\"}${data.opMs === max ? STRINGS.BEST : \"\"}`);\r\n                }\r\n                console.log(...data.log!);\r\n            }\r\n            if (clear) {\r\n                this._doneScripts.splice(0);\r\n                this._loggedScripts.clear();\r\n            }\r\n        }\r\n        private _checkOutput() {\r\n            while (this._logData.length > 0 && this._logData[0].log) {\r\n                if (!isScriptData(this._logData[0]) && this._logData[0].log.length > 0) {\r\n                    console.log(...this._logData[0].log);\r\n                }\r\n                if (isOutputData(this._logData[0])) {\r\n                    this._logPack(this._logData[0].clear);\r\n                }\r\n                this._logData.shift();\r\n            }\r\n        }\r\n        private _next() {\r\n            if (this._running < this.options.parallel) {\r\n                let data = this._scripts.shift();\r\n                if (data) {\r\n                    this._runWorker(data);\r\n                } else {\r\n                    this._logPack(false);\r\n                    console.log(STRINGS.COMPLETED);\r\n                    this._endCb && this._endCb();\r\n                }\r\n            }\r\n        }\r\n        private _getWorkerScript(data:ScriptData) {\r\n            return `parent.addEventListener(\"message\", async _event_ñ => {\r\n                try {\r\n                    const _data_ñ = _d_ñ(_event_ñ.data);\r\n                    ${this._setup}\r\n                    ${data.script.evalArgs}\r\n                    const _n_ñ = _now_ñ();\r\n                    for (let _i_ñ = 0; _i_ñ < ${data.cycles}; _i_ñ++) {\r\n                        ${data.script.body}\r\n                    }\r\n                    const _diff_ñ = _dif_ñ(_n_ñ);\r\n                    parent.postMessage({ diff: _diff_ñ });\r\n                } catch (e) {\r\n                    parent.postMessage({ error: String(e) });\r\n                }\r\n                close();\r\n            });`;\r\n        }\r\n        private _checkDataResult(data:ScriptData, result:{log:string}|{error:string}|{diff:number}) {\r\n            if (\"log\" in result) {\r\n                console.log(...result.log);\r\n                return;\r\n            } else {\r\n                this._running--;\r\n                if (\"error\" in result) {\r\n                    data.log = [data.name, \"-\", result.error];\r\n                    data.opMs = 0;\r\n                    this._doneScripts.push(data);\r\n                    this._checkOutput();\r\n                } else {\r\n                    let ms = result.diff;\r\n                    if (ms < 50) {\r\n                        let r = 50 / ms;\r\n                        data.cycles = Math.round(data.cycles * (r || 50));\r\n                        this._scripts.unshift(data);\r\n                    } else {\r\n                        data.samples++;\r\n                        let ops = data.cycles / ms;\r\n                        data.opMs = data.opMs < 0 ? ops : (data.opMs + ops) / 2;\r\n                        data.totalTime += ms;\r\n                        if (data.totalTime > this.options.ms) {\r\n                            data.log = [data.name, \"-\", Math.round(data.opMs*1000).toLocaleString(), \"op/s.\", data.samples, \"workers in\", Math.round(data.totalTime), \"ms.\"];\r\n                            this._doneScripts.push(data);\r\n                            this._checkOutput();\r\n                        } else {\r\n                            this._scripts.unshift(data);\r\n                        }\r\n                    }\r\n                }\r\n                this._next();\r\n            }\r\n        }\r\n        private _runWorker(data:ScriptData) {\r\n            this._running++;\r\n            let worker = new MultiWorker(this._getWorkerScript(data));\r\n            worker.addEventListener(\"message\", event => {\r\n                if (!event.data) {\r\n                    this._checkDataResult(data, event as any); // as any because of dom typings\r\n                } else {\r\n                    this._checkDataResult(data, event.data);\r\n                }\r\n            });\r\n            worker.addEventListener(\"error\", console.error);\r\n            worker.postMessage({\r\n                args: this._args || []\r\n            });\r\n        }\r\n    }\r\n}"],"names":[],"mappings":"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"}